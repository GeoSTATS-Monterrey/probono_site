{"version":3,"sources":["../src/sidebar-trigger.tsx"],"sourcesContent":["'use client';\nimport React, {type ReactElement, type ReactNode} from 'react';\nimport {type OverlayTriggerProps, useOverlayTriggerState} from 'react-stately';\nimport {useOverlayTrigger} from 'react-aria';\nimport {AnimatePresence} from 'framer-motion';\nimport Button from '@/button/button.tsx';\nimport {type ButtonVariantProps} from '@/button/button-variants.tsx';\nimport Sidebar from '@/sidebar.tsx';\n\nexport type SidebarTriggerProps = {\n\treadonly children: ReactElement;\n\treadonly icon: ReactNode;\n\treadonly className?: string;\n} & OverlayTriggerProps &\n\tButtonVariantProps;\n\nexport default function SidebarTrigger(props: SidebarTriggerProps) {\n\tconst {children, icon} = props;\n\n\tconst state = useOverlayTriggerState(props);\n\tconst {triggerProps, overlayProps} = useOverlayTrigger(\n\t\t{type: 'dialog'},\n\t\tstate,\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<Button {...props} {...triggerProps}>\n\t\t\t\t{icon}\n\t\t\t</Button>\n\t\t\t<AnimatePresence>\n\t\t\t\t{state.isOpen && (\n\t\t\t\t\t<Sidebar isDismissable {...props} state={state}>\n\t\t\t\t\t\t{React.cloneElement(children, overlayProps)}\n\t\t\t\t\t</Sidebar>\n\t\t\t\t)}\n\t\t\t</AnimatePresence>\n\t\t</>\n\t);\n}\n"],"mappings":";;;;;;;;AACA,OAAO,WAAgD;AACvD,SAAkC,8BAA6B;AAC/D,SAAQ,yBAAwB;AAChC,SAAQ,uBAAsB;AAsB5B,mBACC,KADD;AAVa,SAAR,eAAgC,OAA4B;AAClE,QAAM,EAAC,UAAU,KAAI,IAAI;AAEzB,QAAM,QAAQ,uBAAuB,KAAK;AAC1C,QAAM,EAAC,cAAc,aAAY,IAAI;AAAA,IACpC,EAAC,MAAM,SAAQ;AAAA,IACf;AAAA,EACD;AAEA,SACC,iCACC;AAAA,wBAAC,kBAAQ,GAAG,OAAQ,GAAG,cACrB,gBACF;AAAA,IACA,oBAAC,mBACC,gBAAM,UACN,oBAAC,WAAQ,eAAa,MAAE,GAAG,OAAO,OAChC,gBAAM,aAAa,UAAU,YAAY,GAC3C,GAEF;AAAA,KACD;AAEF;","names":[]}