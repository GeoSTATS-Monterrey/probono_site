{"version":3,"sources":["../src/list.tsx"],"sourcesContent":["import React, {type ForwardedRef, forwardRef} from 'react';\nimport {\n\ttype AriaGridListProps,\n\tuseGridList,\n\tuseGridListItem,\n\tuseFocusRing,\n\tmergeProps,\n\tuseGridListSelectionCheckbox,\n} from 'react-aria';\nimport {\n\tuseListState,\n\ttype ListProps as ListStateProps,\n\ttype ListState,\n\ttype Node,\n} from 'react-stately';\nimport {useObjectRef} from '@react-aria/utils';\nimport Checkbox from './checkbox.tsx';\nimport {cx} from './cva.ts';\n\nexport type ListProps<T extends Record<string, unknown>> = {\n\treadonly className?: string;\n} & AriaGridListProps<T> &\n\tListStateProps<T>;\n\nfunction List<T extends Record<string, unknown>>(\n\tprops: ListProps<T>,\n\tref: ForwardedRef<HTMLUListElement>,\n) {\n\tconst {className} = props;\n\tconst state = useListState(props);\n\tconst listRef = useObjectRef(ref);\n\n\tconst {gridProps} = useGridList(props, state, listRef);\n\n\treturn (\n\t\t<ul\n\t\t\t{...gridProps}\n\t\t\tref={listRef}\n\t\t\tclassName={cx(\n\t\t\t\t'border border-stone-700 divide-y divide-stone-700 rounded',\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t>\n\t\t\t{[...state.collection].map(item => (\n\t\t\t\t<ListItem key={item.key} item={item} state={state} />\n\t\t\t))}\n\t\t</ul>\n\t);\n}\n\nexport default forwardRef(List);\n\ntype ListItemProps<T extends Record<string, unknown>> = {\n\treadonly state: ListState<T>;\n\treadonly item: Node<T>;\n};\n\nfunction ListCheckbox<T extends Record<string, unknown>>(\n\tprops: ListItemProps<T>,\n) {\n\tconst {state, item} = props;\n\tconst {checkboxProps} = useGridListSelectionCheckbox(\n\t\t{\n\t\t\tkey: item.key,\n\t\t},\n\t\tstate,\n\t);\n\treturn <Checkbox {...checkboxProps} />;\n}\n\nexport const ListItem = forwardRef(function ListItem<\n\tT extends Record<string, unknown>,\n>(props: ListItemProps<T>, ref: ForwardedRef<HTMLLIElement>) {\n\tconst {item, state} = props;\n\tconst itemRef = useObjectRef(ref);\n\tconst {rowProps, gridCellProps} = useGridListItem(\n\t\t{node: item},\n\t\tstate,\n\t\titemRef,\n\t);\n\n\tconst {focusProps} = useFocusRing();\n\n\tconst selectable =\n\t\tstate.selectionManager.selectionMode !== 'none' &&\n\t\tstate.selectionManager.selectionBehavior === 'toggle';\n\n\treturn (\n\t\t<li\n\t\t\t{...mergeProps(rowProps, focusProps)}\n\t\t\tref={itemRef}\n\t\t\tclassName={cx('p-2', selectable && 'cursor-pointer')}\n\t\t>\n\t\t\t<div\n\t\t\t\t{...gridCellProps}\n\t\t\t\tclassName={cx('text-stone-300 flex items-center gap-4')}\n\t\t\t>\n\t\t\t\t{selectable && <ListCheckbox state={state} item={item} />}\n\t\t\t\t{item.rendered}\n\t\t\t</div>\n\t\t</li>\n\t);\n});\n"],"mappings":";;;;;;;;;;;AAAA,SAAkC,kBAAiB;AACnD;AAAA,EAEC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP;AAAA,EACC;AAAA,OAIM;AA8BH,cAiDD,YAjDC;AApBJ,SAAS,KACR,OACA,KACC;AACD,QAAM,EAAC,UAAS,IAAI;AACpB,QAAM,QAAQ,aAAa,KAAK;AAChC,QAAM,UAAU,0CAAa,GAAG;AAEhC,QAAM,EAAC,UAAS,IAAI,YAAY,OAAO,OAAO,OAAO;AAErD,SACC;AAAA,IAAC;AAAA;AAAA,MACC,GAAG;AAAA,MACJ,KAAK;AAAA,MACL,WAAW;AAAA,QACV;AAAA,QACA;AAAA,MACD;AAAA,MAEC,WAAC,GAAG,MAAM,UAAU,EAAE,IAAI,UAC1B,oBAAC,YAAwB,MAAY,SAAtB,KAAK,GAA+B,CACnD;AAAA;AAAA,EACF;AAEF;AAEA,IAAO,eAAQ,WAAW,IAAI;AAO9B,SAAS,aACR,OACC;AACD,QAAM,EAAC,OAAO,KAAI,IAAI;AACtB,QAAM,EAAC,cAAa,IAAI;AAAA,IACvB;AAAA,MACC,KAAK,KAAK;AAAA,IACX;AAAA,IACA;AAAA,EACD;AACA,SAAO,oBAAC,YAAU,GAAG,eAAe;AACrC;AAEO,IAAM,WAAW,WAAW,SAASA,UAE1C,OAAyB,KAAkC;AAC5D,QAAM,EAAC,MAAM,MAAK,IAAI;AACtB,QAAM,UAAU,0CAAa,GAAG;AAChC,QAAM,EAAC,UAAU,cAAa,IAAI;AAAA,IACjC,EAAC,MAAM,KAAI;AAAA,IACX;AAAA,IACA;AAAA,EACD;AAEA,QAAM,EAAC,WAAU,IAAI,aAAa;AAElC,QAAM,aACL,MAAM,iBAAiB,kBAAkB,UACzC,MAAM,iBAAiB,sBAAsB;AAE9C,SACC;AAAA,IAAC;AAAA;AAAA,MACC,GAAG,WAAW,UAAU,UAAU;AAAA,MACnC,KAAK;AAAA,MACL,WAAW,GAAG,OAAO,cAAc,gBAAgB;AAAA,MAEnD;AAAA,QAAC;AAAA;AAAA,UACC,GAAG;AAAA,UACJ,WAAW,GAAG,wCAAwC;AAAA,UAErD;AAAA,0BAAc,oBAAC,gBAAa,OAAc,MAAY;AAAA,YACtD,KAAK;AAAA;AAAA;AAAA,MACP;AAAA;AAAA,EACD;AAEF,CAAC;","names":["ListItem"]}