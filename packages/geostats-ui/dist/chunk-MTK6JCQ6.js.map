{"version":3,"sources":["../src/button/button.tsx"],"sourcesContent":["'use client';\nimport React, {type ForwardedRef, forwardRef, type ReactNode} from 'react';\nimport {type AriaButtonOptions, useButton} from 'react-aria';\nimport {useObjectRef} from '@react-aria/utils';\nimport {type VariantProps} from '@/cva.ts';\nimport buttonVariant from '@/button/button-variants.tsx';\n\nexport type ButtonProps = {\n\treadonly children?: ReactNode;\n\treadonly className?: string;\n} & AriaButtonOptions<'button'> &\n\tVariantProps<typeof buttonVariant>;\n\nconst Button = (props: ButtonProps, ref: ForwardedRef<HTMLButtonElement>) => {\n\tconst {children} = props;\n\tconst buttonRef = useObjectRef(ref);\n\tconst {buttonProps} = useButton(\n\t\t{\n\t\t\t...props,\n\t\t\t// Workaround for react/react-aria #1513\n\t\t\tonPress(event) {\n\t\t\t\tif (\n\t\t\t\t\tevent.pointerType === 'mouse' ||\n\t\t\t\t\tevent.pointerType === 'keyboard'\n\t\t\t\t) {\n\t\t\t\t\tprops.onPress?.(event);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tprops.onPress?.(event);\n\t\t\t\t}, 1);\n\t\t\t},\n\t\t},\n\t\tbuttonRef,\n\t);\n\treturn (\n\t\t<button\n\t\t\t{...buttonProps}\n\t\t\tref={buttonRef}\n\t\t\tclassName={buttonVariant(props)}\n\t\t>\n\t\t\t{children}\n\t\t</button>\n\t);\n};\n\nexport default forwardRef(Button);\n"],"mappings":";;;;;;;;AACA,SAAkC,kBAAiC;AACnE,SAAgC,iBAAgB;AAmC9C;AAxBF,IAAM,SAAS,CAAC,OAAoB,QAAyC;AAC5E,QAAM,EAAC,SAAQ,IAAI;AACnB,QAAM,YAAY,0CAAa,GAAG;AAClC,QAAM,EAAC,YAAW,IAAI;AAAA,IACrB;AAAA,MACC,GAAG;AAAA;AAAA,MAEH,QAAQ,OAAO;AACd,YACC,MAAM,gBAAgB,WACtB,MAAM,gBAAgB,YACrB;AACD,gBAAM,UAAU,KAAK;AACrB;AAAA,QACD;AAEA,mBAAW,MAAM;AAChB,gBAAM,UAAU,KAAK;AAAA,QACtB,GAAG,CAAC;AAAA,MACL;AAAA,IACD;AAAA,IACA;AAAA,EACD;AACA,SACC;AAAA,IAAC;AAAA;AAAA,MACC,GAAG;AAAA,MACJ,KAAK;AAAA,MACL,WAAW,wBAAc,KAAK;AAAA,MAE7B;AAAA;AAAA,EACF;AAEF;AAEA,IAAO,iBAAQ,WAAW,MAAM;","names":[]}