{"version":3,"sources":["../src/tag-group.tsx"],"sourcesContent":["import React, {useRef} from 'react';\nimport {\n\ttype AriaTagGroupProps,\n\ttype AriaTagProps,\n\tuseFocusRing,\n\tuseTag,\n\tuseTagGroup,\n} from 'react-aria';\nimport {Set} from 'immutable';\nimport {type Key, type ListState, type Node, useListState} from 'react-stately';\nimport Close from '@material-design-icons/svg/round/close.svg';\nimport Button from './button/button.tsx';\n\nexport type TagGroupProps<T extends Record<string, unknown>> = {\n\treadonly className?: string;\n\treadonly onRemove?: (keys: Set<Key>) => void;\n} & Omit<AriaTagGroupProps<T>, 'onRemove'>;\n\nexport default function TagGroup<T extends Record<string, unknown>>(\n\tprops: TagGroupProps<T>,\n) {\n\tconst {className, label, description, errorMessage, onRemove} = props;\n\tconst divRef = useRef<HTMLDivElement>(null);\n\n\tconst state = useListState(props);\n\n\tconst {gridProps, labelProps, descriptionProps, errorMessageProps} =\n\t\tuseTagGroup(\n\t\t\t{\n\t\t\t\t...props,\n\t\t\t\tonRemove:\n\t\t\t\t\tonRemove === undefined\n\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t: keys => {\n\t\t\t\t\t\t\t\tonRemove(Set(keys));\n\t\t\t\t\t\t\t},\n\t\t\t},\n\t\t\tstate,\n\t\t\tdivRef,\n\t\t);\n\n\treturn (\n\t\t<div className={className}>\n\t\t\t<div {...labelProps} className='mb-1 text-sm text-stone-300'>\n\t\t\t\t{label}\n\t\t\t</div>\n\t\t\t<div {...gridProps} ref={divRef} className='flex flex-wrap gap-2'>\n\t\t\t\t{[...state.collection].map(item => (\n\t\t\t\t\t<Tag key={item.key} item={item} state={state} />\n\t\t\t\t))}\n\t\t\t</div>\n\t\t\t{description === undefined ? null : (\n\t\t\t\t<div {...descriptionProps}>{description}</div>\n\t\t\t)}\n\t\t\t{errorMessage === undefined ? null : (\n\t\t\t\t<div {...errorMessageProps}> {errorMessage} </div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\ntype TagProps<T> = {\n\treadonly item: Node<T>;\n\treadonly state: ListState<T>;\n} & AriaTagProps<T>;\n\nfunction Tag<T>(props: TagProps<T>) {\n\tconst {item, state} = props;\n\n\tconst ref = useRef(null);\n\n\tconst {focusProps, isFocusVisible} = useFocusRing({\n\t\twithin: true,\n\t});\n\n\tconst {rowProps, gridCellProps, removeButtonProps, allowsRemoving} = useTag(\n\t\tprops,\n\t\tstate,\n\t\tref,\n\t);\n\n\treturn (\n\t\t<div\n\t\t\tref={ref}\n\t\t\t{...rowProps}\n\t\t\t{...focusProps}\n\t\t\tdata-focus-visible={isFocusVisible}\n\t\t>\n\t\t\t<div\n\t\t\t\t{...gridCellProps}\n\t\t\t\tclassName='flex items-center gap-2 rounded border border-stone-700 px-2 text-stone-300'\n\t\t\t>\n\t\t\t\t{item.rendered}\n\t\t\t\t{allowsRemoving && (\n\t\t\t\t\t<Button {...removeButtonProps} variant='text' size='sm'>\n\t\t\t\t\t\t<Close className='fill-current' />\n\t\t\t\t\t</Button>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n"],"mappings":";;;;;AAAA,SAAe,cAAa;AAC5B;AAAA,EAGC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAQ,WAAU;AAClB,SAA6C,oBAAmB;AAChE,OAAO,WAAW;AAiCf,cAYC,YAZD;AAzBY,SAAR,SACN,OACC;AACD,QAAM,EAAC,WAAW,OAAO,aAAa,cAAc,SAAQ,IAAI;AAChE,QAAM,SAAS,OAAuB,IAAI;AAE1C,QAAM,QAAQ,aAAa,KAAK;AAEhC,QAAM,EAAC,WAAW,YAAY,kBAAkB,kBAAiB,IAChE;AAAA,IACC;AAAA,MACC,GAAG;AAAA,MACH,UACC,aAAa,SACV,SACA,UAAQ;AACR,iBAAS,IAAI,IAAI,CAAC;AAAA,MACnB;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,EACD;AAED,SACC,qBAAC,SAAI,WACJ;AAAA,wBAAC,SAAK,GAAG,YAAY,WAAU,+BAC7B,iBACF;AAAA,IACA,oBAAC,SAAK,GAAG,WAAW,KAAK,QAAQ,WAAU,wBACzC,WAAC,GAAG,MAAM,UAAU,EAAE,IAAI,UAC1B,oBAAC,OAAmB,MAAY,SAAtB,KAAK,GAA+B,CAC9C,GACF;AAAA,IACC,gBAAgB,SAAY,OAC5B,oBAAC,SAAK,GAAG,kBAAmB,uBAAY;AAAA,IAExC,iBAAiB,SAAY,OAC7B,qBAAC,SAAK,GAAG,mBAAmB;AAAA;AAAA,MAAE;AAAA,MAAa;AAAA,OAAC;AAAA,KAE9C;AAEF;AAOA,SAAS,IAAO,OAAoB;AACnC,QAAM,EAAC,MAAM,MAAK,IAAI;AAEtB,QAAM,MAAM,OAAO,IAAI;AAEvB,QAAM,EAAC,YAAY,eAAc,IAAI,aAAa;AAAA,IACjD,QAAQ;AAAA,EACT,CAAC;AAED,QAAM,EAAC,UAAU,eAAe,mBAAmB,eAAc,IAAI;AAAA,IACpE;AAAA,IACA;AAAA,IACA;AAAA,EACD;AAEA,SACC;AAAA,IAAC;AAAA;AAAA,MACA;AAAA,MACC,GAAG;AAAA,MACH,GAAG;AAAA,MACJ,sBAAoB;AAAA,MAEpB;AAAA,QAAC;AAAA;AAAA,UACC,GAAG;AAAA,UACJ,WAAU;AAAA,UAET;AAAA,iBAAK;AAAA,YACL,kBACA,oBAAC,kBAAQ,GAAG,mBAAmB,SAAQ,QAAO,MAAK,MAClD,8BAAC,SAAM,WAAU,gBAAe,GACjC;AAAA;AAAA;AAAA,MAEF;AAAA;AAAA,EACD;AAEF;","names":[]}