{"version":3,"sources":["../src/popover-button-trigger.tsx"],"sourcesContent":["import React, {type ReactElement, type ReactNode} from 'react';\nimport {type OverlayTriggerProps, useOverlayTriggerState} from 'react-stately';\nimport {mergeProps, type Placement, useOverlayTrigger} from 'react-aria';\nimport Button, {type ButtonProps} from '@/button/button.tsx';\nimport Popover from '@/popover.tsx';\n\nexport type PopoverButtonTriggerProps = {\n\treadonly className?: string;\n\treadonly label: ReactNode;\n\treadonly children: ReactElement;\n\treadonly placement: Placement;\n} & OverlayTriggerProps &\n\tButtonProps;\n\nexport default function PopoverButtonTrigger(props: PopoverButtonTriggerProps) {\n\tconst {label, children, placement} = props;\n\tconst buttonRef = React.useRef<HTMLButtonElement>(null);\n\tconst state = useOverlayTriggerState(props);\n\tconst {triggerProps, overlayProps} = useOverlayTrigger(\n\t\t{type: 'dialog'},\n\t\tstate,\n\t\tbuttonRef,\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<Button {...mergeProps(triggerProps, props)} ref={buttonRef}>\n\t\t\t\t{label}\n\t\t\t</Button>\n\t\t\t{state.isOpen && (\n\t\t\t\t<Popover\n\t\t\t\t\t{...props}\n\t\t\t\t\ttriggerRef={buttonRef}\n\t\t\t\t\tstate={state}\n\t\t\t\t\tplacement={placement}\n\t\t\t\t>\n\t\t\t\t\t{React.cloneElement(children, overlayProps)}\n\t\t\t\t</Popover>\n\t\t\t)}\n\t\t</>\n\t);\n}\n"],"mappings":";;;;;;;;AAAA,OAAO,WAAgD;AACvD,SAAkC,8BAA6B;AAC/D,SAAQ,YAA4B,yBAAwB;AAuB1D,mBACC,KADD;AAXa,SAAR,qBAAsC,OAAkC;AAC9E,QAAM,EAAC,OAAO,UAAU,UAAS,IAAI;AACrC,QAAM,YAAY,MAAM,OAA0B,IAAI;AACtD,QAAM,QAAQ,uBAAuB,KAAK;AAC1C,QAAM,EAAC,cAAc,aAAY,IAAI;AAAA,IACpC,EAAC,MAAM,SAAQ;AAAA,IACf;AAAA,IACA;AAAA,EACD;AAEA,SACC,iCACC;AAAA,wBAAC,kBAAQ,GAAG,WAAW,cAAc,KAAK,GAAG,KAAK,WAChD,iBACF;AAAA,IACC,MAAM,UACN;AAAA,MAAC;AAAA;AAAA,QACC,GAAG;AAAA,QACJ,YAAY;AAAA,QACZ;AAAA,QACA;AAAA,QAEC,gBAAM,aAAa,UAAU,YAAY;AAAA;AAAA,IAC3C;AAAA,KAEF;AAEF;","names":[]}