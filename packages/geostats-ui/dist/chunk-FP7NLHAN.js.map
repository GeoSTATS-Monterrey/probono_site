{"version":3,"sources":["../src/form/form.tsx"],"sourcesContent":["import React, {type ReactNode, useMemo} from 'react';\nimport {FormValidationContext} from 'react-stately';\nimport {useFormState} from 'react-dom';\nimport {Seq} from 'immutable';\nimport {type ToastContent} from '@/toast.tsx';\nimport {FormSubmitListener} from '@/form/form-submit-listener.tsx';\n\nexport type FormState<T> = {\n\treadonly success: boolean;\n\treadonly redirectTo?: string;\n\treadonly formErrors: string[];\n\treadonly fieldErrors: {\n\t\t[K in keyof T]?: string[];\n\t};\n};\n\ntype StaticValues<T> = {\n\treadonly [K in keyof T]?: T[K];\n};\n\nexport type FormAction<T> = (\n\tpreviousState: FormState<T>,\n\tdata: FormData,\n) => Promise<FormState<T>>;\n\nexport type FormProps<T> = {\n\treadonly children: ReactNode;\n\treadonly className?: string;\n\treadonly action: FormAction<T>;\n\treadonly successToast?: ToastContent;\n\treadonly staticValues?: StaticValues<T>;\n};\n\nfunction processStaticValues<T>(\n\tstaticValues: StaticValues<T> | undefined,\n): Array<readonly [string, string | number]> {\n\tif (staticValues === undefined) {\n\t\treturn [];\n\t}\n\n\treturn Seq(Object.entries(staticValues))\n\t\t.filter(([, value]) => value !== undefined)\n\t\t.map(([key, value]) => {\n\t\t\tif (typeof value === 'boolean') {\n\t\t\t\treturn [key, value ? 'true' : ''] as const;\n\t\t\t}\n\n\t\t\tif (value instanceof Date) {\n\t\t\t\treturn [key, value.toString()] as const;\n\t\t\t}\n\n\t\t\tif (typeof value === 'object') {\n\t\t\t\treturn [key, JSON.stringify(value)] as const;\n\t\t\t}\n\n\t\t\tif (typeof value === 'string' || typeof value === 'number') {\n\t\t\t\treturn [key, value] as const;\n\t\t\t}\n\n\t\t\tthrow new Error('failed to process static values for form');\n\t\t})\n\t\t.toArray();\n}\n\nexport default function Form<T>(props: FormProps<T>) {\n\tconst {children, action, staticValues, successToast, className} = props;\n\tconst [state, formAction] = useFormState(action, {\n\t\tsuccess: false,\n\t\tformErrors: [],\n\t\tfieldErrors: {},\n\t});\n\n\tconst {formErrors, fieldErrors} = state;\n\n\tconst processedStaticValues = useMemo(\n\t\t() => processStaticValues(staticValues),\n\t\t[staticValues],\n\t);\n\n\treturn (\n\t\t<form action={formAction} className={className}>\n\t\t\t{processedStaticValues.map(([key, value]) => (\n\t\t\t\t<input key={key} readOnly hidden name={key} value={value} />\n\t\t\t))}\n\n\t\t\t{formErrors.length > 0 && (\n\t\t\t\t<div className='mb-4 rounded bg-red-400 p-4 text-stone-50'>\n\t\t\t\t\t{formErrors.join(' ')}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t{successToast && (\n\t\t\t\t<FormSubmitListener state={state} successToast={successToast} />\n\t\t\t)}\n\t\t\t<FormValidationContext.Provider\n\t\t\t\t// @ts-expect-error fieldErrors is of a correct type, provider is wrongly typed.\n\t\t\t\tvalue={fieldErrors}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</FormValidationContext.Provider>\n\t\t</form>\n\t);\n}\n"],"mappings":";;;;;;;;;;;AAEA,uBAA2B;AAF3B,SAA+B,eAAc;AAC7C,SAAQ,6BAA4B;AAEpC,SAAQ,WAAU;AA6EhB,SAEE,KAFF;AA/CF,SAAS,oBACR,cAC4C;AAC5C,MAAI,iBAAiB,QAAW;AAC/B,WAAO,CAAC;AAAA,EACT;AAEA,SAAO,IAAI,OAAO,QAAQ,YAAY,CAAC,EACrC,OAAO,CAAC,CAAC,EAAE,KAAK,MAAM,UAAU,MAAS,EACzC,IAAI,CAAC,CAAC,KAAK,KAAK,MAAM;AACtB,QAAI,OAAO,UAAU,WAAW;AAC/B,aAAO,CAAC,KAAK,QAAQ,SAAS,EAAE;AAAA,IACjC;AAEA,QAAI,iBAAiB,MAAM;AAC1B,aAAO,CAAC,KAAK,MAAM,SAAS,CAAC;AAAA,IAC9B;AAEA,QAAI,OAAO,UAAU,UAAU;AAC9B,aAAO,CAAC,KAAK,KAAK,UAAU,KAAK,CAAC;AAAA,IACnC;AAEA,QAAI,OAAO,UAAU,YAAY,OAAO,UAAU,UAAU;AAC3D,aAAO,CAAC,KAAK,KAAK;AAAA,IACnB;AAEA,UAAM,IAAI,MAAM,0CAA0C;AAAA,EAC3D,CAAC,EACA,QAAQ;AACX;AAEe,SAAR,KAAyB,OAAqB;AACpD,QAAM,EAAC,UAAU,QAAQ,cAAc,cAAc,UAAS,IAAI;AAClE,QAAM,CAAC,OAAO,UAAU,QAAI,+BAAa,QAAQ;AAAA,IAChD,SAAS;AAAA,IACT,YAAY,CAAC;AAAA,IACb,aAAa,CAAC;AAAA,EACf,CAAC;AAED,QAAM,EAAC,YAAY,YAAW,IAAI;AAElC,QAAM,wBAAwB;AAAA,IAC7B,MAAM,oBAAoB,YAAY;AAAA,IACtC,CAAC,YAAY;AAAA,EACd;AAEA,SACC,qBAAC,UAAK,QAAQ,YAAY,WACxB;AAAA,0BAAsB,IAAI,CAAC,CAAC,KAAK,KAAK,MACtC,oBAAC,WAAgB,UAAQ,MAAC,QAAM,MAAC,MAAM,KAAK,SAAhC,GAA8C,CAC1D;AAAA,IAEA,WAAW,SAAS,KACpB,oBAAC,SAAI,WAAU,6CACb,qBAAW,KAAK,GAAG,GACrB;AAAA,IAEA,gBACA,oBAAC,sBAAmB,OAAc,cAA4B;AAAA,IAE/D;AAAA,MAAC,sBAAsB;AAAA,MAAtB;AAAA,QAEA,OAAO;AAAA,QAEN;AAAA;AAAA,IACF;AAAA,KACD;AAEF;","names":[]}